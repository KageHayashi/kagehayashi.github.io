<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Installing System-level CAs on Android</title>
      <link href="/posts/install-ca-android/"/>
      <url>/posts/install-ca-android/</url>
      
        <content type="html"><![CDATA[<p>I’ve been trying to play around with pentesting android apps and have run into some problems. I thought that the traffic intercept work flow would simply consist of:</p><ul><li>Start Burp Suite Proxy</li><li>Install user-level Burp CA in Android</li><li>Point proxy settings in Android device to Burp</li><li>Start intercepting traffic</li></ul><p>However, I’ve been experiencing some problems with a user-level CA installed.<br><img src="/posts/install-ca-android/image-20240309141702680.png"></p><p><img src="/posts/install-ca-android/image-20240309141716591.png"></p><p>Apparently, starting with Android Nougat (API &gt;&#x3D;24), it is no longer possible to just install Burp Suite’s CA as a user certificate to start intercepting traffic. Apps now will only trust system level CAs. </p><ul><li><a href="https://android-developers.googleblog.com/2016/07/changes-to-trusted-certificate.html">https://android-developers.googleblog.com/2016/07/changes-to-trusted-certificate.html</a></li></ul><p>One way to get around this is to install the Burp CA as a <strong>system-level CA</strong></p><h1 id="Installing-system-level-Trusted-CAs"><a href="#Installing-system-level-Trusted-CAs" class="headerlink" title="Installing system-level Trusted CAs"></a>Installing system-level Trusted CAs</h1><p>In Android, trusted CAs are located at <code>/system/etc/security/cacerts</code> using a special format. Certificates must be in the PEM format with the filename of <code>&lt;subject_hash_old&gt;.0</code></p><h2 id="1-Export-Burp-CA-and-convert-to-PEM"><a href="#1-Export-Burp-CA-and-convert-to-PEM" class="headerlink" title="1. Export Burp CA and convert to PEM"></a>1. Export Burp CA and convert to PEM</h2><p><img src="/posts/install-ca-android/image-20240309141931258.png"></p><p>We can then use <code>openssl</code> to convert the <code>.der</code> file to <code>.pem</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -inform DER -<span class="keyword">in</span> cacert.der -out cacert.pem</span><br><span class="line">openssl x509 -inform PEM -subject_hash_old -<span class="keyword">in</span> cacert.pem |<span class="built_in">head</span> -1</span><br><span class="line"><span class="built_in">mv</span> cacert.pem &lt;<span class="built_in">hash</span>&gt;.0</span><br></pre></td></tr></table></figure><p><img src="/posts/install-ca-android/image-20240309142119784.png"></p><h2 id="2-Copy-the-CA-to-the-device"><a href="#2-Copy-the-CA-to-the-device" class="headerlink" title="2. Copy the CA to the device"></a>2. Copy the CA to the device</h2><p>In order to install the certificate as a trusted CA, we need to copy the file to <code>/system/etc/security/cacerts</code>, which isn’t normally accessible by normal users. We have to remount <code>/system</code> to be writeable, which can be done via <code>adb root</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br><span class="line">adb root</span><br><span class="line">adb remount</span><br><span class="line">adb push &lt;cert&gt;.0 /sdcard/</span><br></pre></td></tr></table></figure><p>As an example, here I’m using NoxPlayer as the emulator of choice<br><img src="/posts/install-ca-android/image-20240309142528753.png"></p><p>From here, go into <code>adb shell</code> and transfer the CA file from <code>/sdcard</code> to <code>/system/etc/security/cacerts/</code> and reboot</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line"><span class="built_in">mv</span> /sdcard/&lt;cert&gt;.0 /system/etc/security/cacerts/</span><br><span class="line"><span class="built_in">chmod</span> 644 /system/etc/security/cacerts/&lt;cert&gt;.0</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p><img src="/posts/install-ca-android/image-20240309142830510.png"></p><h2 id="3-Check-Trusted-Credentials"><a href="#3-Check-Trusted-Credentials" class="headerlink" title="3. Check Trusted Credentials"></a>3. Check Trusted Credentials</h2><p>Depending on the Android device, navigate into something like <code>Settings -&gt; Security &amp; Location -&gt; Encryption &amp; Credentials -&gt; Trusted Credentials</code> and check that <code>PortSwigger</code> is installed as a system-level CA.</p><p><img src="/posts/install-ca-android/image-20240309143118272.png"></p><h2 id="4-Manually-Set-Proxy"><a href="#4-Manually-Set-Proxy" class="headerlink" title="4. Manually Set Proxy"></a>4. Manually Set Proxy</h2><p>Now that we have the CA installed, we can start our proxy. First, make sure that Burp proxy is set on All interfaces.<br><img src="/posts/install-ca-android/image-20240309143707275.png"></p><p>Next, make note of the IP of the host running Burp Suite. Here it’s <code>192.168.248.175</code> for me.<br><img src="/posts/install-ca-android/image-20240309143822411.png"></p><p>Go into <code>Settings -&gt; Network &amp; Internet -&gt; Wi-Fi</code> and set the <code>Proxy</code> setting to <code>Manual</code> and fill in the proxy hostname and proxy port (Burp defaults to <code>8080</code>)<br><img src="/posts/install-ca-android/image-20240309143950370.png"></p><h2 id="5-Start-Intercepting"><a href="#5-Start-Intercepting" class="headerlink" title="5. Start Intercepting"></a>5. Start Intercepting</h2><p>At this point, Burp should be intercepting all the network traffic on the Android device. Start an app, and you should start seeing traffic coming in.</p><p><img src="/posts/install-ca-android/image-20240309144231357.png"></p><hr><p>References:</p><ul><li><a href="https://blog.ropnop.com/configuring-burp-suite-with-android-nougat/">https://blog.ropnop.com/configuring-burp-suite-with-android-nougat/</a></li><li><a href="https://android-developers.googleblog.com/2016/07/changes-to-trusted-certificate.html">https://android-developers.googleblog.com/2016/07/changes-to-trusted-certificate.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Burp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wireguard Quick Start</title>
      <link href="/posts/wireguard/"/>
      <url>/posts/wireguard/</url>
      
        <content type="html"><![CDATA[<h1 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h1><p>Server:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install wireguard</span><br><span class="line"></span><br><span class="line">wg genkey | sudo <span class="built_in">tee</span> /etc/wireguard/private.key</span><br><span class="line">sudo <span class="built_in">chmod</span> go= /etc/wireguard/private.key</span><br><span class="line"></span><br><span class="line">sudo <span class="built_in">cat</span> /etc/wireguard/private.key | wg pubkey | sudo <span class="built_in">tee</span> /etc/wireguard/public.key</span><br><span class="line"></span><br><span class="line">sudo vim /etc/wireguard/wg0.conf</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /etc/wireguard/wg0.conf</span></span><br><span class="line">[Interface]</span><br><span class="line">PrivateKey = base64_encoded_private_key_goes_here</span><br><span class="line">Address = 10.0.0.1/24</span><br><span class="line">ListenPort = 51820</span><br><span class="line">SaveConfig = <span class="literal">true</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wg-quick up wg0</span><br><span class="line">systemctl <span class="built_in">enable</span> wg-quick@wg0</span><br><span class="line">systemctl status wg-quick@wg0</span><br></pre></td></tr></table></figure><p>Peer client:</p><ul><li>Same steps but different conf file<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /etc/wireguard/wg0.conf</span></span><br><span class="line">[Interface]</span><br><span class="line">PrivateKey = base64_encoded_peer_private_key_goes_here</span><br><span class="line">Address = 10.0.0.2/24</span><br><span class="line">PostUp = ping -c1 10.0.0.1 <span class="comment"># Initialize tunnel</span></span><br><span class="line"></span><br><span class="line">[Peer]</span><br><span class="line">PublicKey = base64_encoded_server_public_key</span><br><span class="line">AllowedIPs = 10.0.0.0/24</span><br><span class="line">Endpoint = 192.168.248.129:51820</span><br></pre></td></tr></table></figure></li></ul><p>Finally, add peer to server config</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wg <span class="built_in">set</span> wg0 peer &lt;peer_public_key&gt; allowed-ips 10.0.0.2</span><br></pre></td></tr></table></figure><p>alternatively, put the following in the server config</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">[Peer]</span><br><span class="line">PublicKey = &lt;peer_public_key&gt;</span><br><span class="line">AllowedIPs = 10.0.0.2/24</span><br></pre></td></tr></table></figure><p>To stop:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">disable</span> wg-quick@wg0</span><br><span class="line">sudo wg-quick down wg0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
